(*
let a = 5 in
let b = 2. in
let c = true in
let f x y = x *. y in
let g x y = x and y in
let id x = x in
(fun x -> fun y -> fun z -> (id x, id y, id z % 3)) (f 5. b %. 15.) (g true true or false) (a * 3)
*)

let f = fun x -> if x =. 2. then (x *. 3., true, 0) else (x /. 2., false, 1)
in f

(*
let rec fib2 n acc1 acc2 =
	if n = 0 then
		acc1
	else
		fib2 (n - 1) acc2 (acc1 + acc2)
in fib2 20 0 1
*)

(*
let f a b c d e =
	if a and e then
		if (b +. c) <=. 10. then
			d
		else
			('A', 4)
	else
		d
in f (true and true) (10. %. 0.75) (3.14 *. 0.789) (('C', 420)) (not false)
*)

(*
let useless (x: unit) = () in useless ()
*)

(*
let ann (a: int) (b: char) (c: float) (d: bool) e =
	if (a > (100 / 4)) and (not d) then
		(b, c)
	else
		('a', 1.)
in ann 5 'k' 3.14 true ()
*)

// let ann: int -> int -> float -> bool -> unit = fun (x: int) -> fun (y: int) -> fun (w: float) -> fun (z: bool) -> () in ann

// let ann (x: int) (y: int) (w: float) (z: bool) : int -> int -> float -> bool -> unit = () in ann

